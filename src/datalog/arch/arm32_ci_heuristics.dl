//===- arm32_ci_heuristics.dl ------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019-2022 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
Define a set predicates with statistical heuristics for better code inference for ARM32.
*/

/**
Byte value '0x0000', which is "movs r0, r0", is unlikely code.
TODO: add more.
*/
contains_implausible_instr_seq(Block):-
    code_in_block_candidate_refined(EA,Block),
    instruction(EA,_,_,"MOVS",Op1,Op2,0,_,_,_),
    op_regdirect_contains_reg(Op1,"R0"),
    op_regdirect_contains_reg(Op2,"R0").

/**
Limited version of `contains_plausible_instr_seq`.
Exclude implausible instructions.
*/
plausible_block(Block,Weight,Type,0):-
    contains_plausible_instr_seq(Block,Weight,Type),
    !contains_implausible_instr_seq(Block).

/**
Block with movw/movt pair is likely real code.
*/
contains_plausible_instr_seq(Block,6,"movw/movt"):-
    movw_movt_pair(EA_movw,EA_movt,_),
    code_in_block_candidate_refined(EA_movw,Block),
    code_in_block_candidate_refined(EA_movt,Block).

/**
The return register is set up, and return:
E.g,
movs r0, #0
bx lr
*/
contains_plausible_instr_seq(Block,1,"set-r0/return"):-
    code_in_block_candidate_refined(EA,Block),
    !arch.dangling_thumb_instr(Block),
    arch.return(EA),
    straight_line_last_def(EA,EA_def,R0),
    arch.return_reg(R0),
    EA_def < EA,
    (EA - EA_def) <= 8. // Within reasonable distance

/**
Flag-setting instruction followed by IT is likely real code:
E.g.,
cmp r0, #0
ite ne
*/
contains_plausible_instr_seq(Block,2,"cmp/it"):-
    code_in_block_candidate_refined(EA,Block),
    instruction_get_operation(EA,Operation),
    substr(Operation,0,2) = "IT",
    straight_line_last_def(EA,EA_def,Reg),
    arch.condition_flags_reg(Reg),
    code_in_block_candidate_refined(EA_def,Block),
    instruction_get_operation(EA_def,CmpOperation),
    arch.cmp_operation(CmpOperation).

/**
Instruction setting lr followed by jump is likely real code:
E.g.,
mov lr, pc
bx target
*/
contains_plausible_instr_seq(Block,7,"mov-lr-pc/jump"):-
    code_in_block_candidate_refined(EA,Block),
    !arch.dangling_thumb_instr(Block),
    arch.pc_reg(PC),
    arch.move_reg_reg(EA,"LR",PC),
    next(EA,EA_branch),
    code_in_block_candidate_refined(EA_branch,Block),
    arch.jump(EA_branch).

/**
Instruction releasing stack followed by return is likely real code:
E.g.,
sub sp, fp, #8   or   add sp, #8
pop {pc}
*/
contains_plausible_instr_seq(Block,1,"adjust-sp/return"):-
    arch.return(EA),
    code_in_block_candidate_refined(EA,Block),
    !arch.dangling_thumb_instr(Block),
    code_in_block_candidate_refined(EA2,Block),
    arch.stack_pointer(SP),
    (
        arch.reg_arithmetic_operation(EA2,SP,FP,_,N), N < 0,
        arch.frame_pointer(FP)
        ;
        arch.reg_arithmetic_operation(EA2,SP,SP,_,N), N > 0
    ).

/**
If a block contains multiple stack load instructions, it is likely a real
code.
*/
contains_plausible_instr_seq(Block,2,"multiple loads from stack"):-
    code_in_block_candidate_refined(_,Block),
    arch.stack_pointer(SP),
    Count = count :{code_in_block_candidate_refined(EA,Block),
                    arch.memory_access("LOAD",EA,_,_,_,SP,_,_,_)},
    Count > 5.

/**
Give 1 point to the blocks that are one-step transitive
from a block `plausible_block`.
*/
plausible_block(Block,1,cat("transitive: ",Note),Block2):-
    unresolved_block(Block,"code",_),
    !arch.dangling_thumb_instr(Block),
    (
        code_in_block_candidate_refined(EA,Block),
        direct_jump(EA,Block2),
        Note = "jump to"
        ;
        code_in_block_candidate_refined(EA,Block),
        direct_call(EA,Block2),
        Note = "call to"
        ;
        direct_jump(EA,Block),
        code_in_block_candidate_refined(EA,Block2),
        Note = "jump from"
        ;
        direct_call(EA,Block),
        code_in_block_candidate_refined(EA,Block2),
        Note = "call from"
        ;
        may_fallthrough(EA,Block),
        code_in_block_candidate_refined(EA,Block2),
        Note = "may-fallthrough from"
        ;
        must_fallthrough(EA,Block),
        code_in_block_candidate_refined(EA,Block2),
        Note = "must-fallthrough from"
    ),
    plausible_block(Block2,_,_,0).
